@page "/ImageInference"
@inject HttpClient Http
@using Microsoft.ML.OnnxRuntime.Tensors
@using Microsoft.ML.OnnxRuntime 
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing;

<h3>ImageInference</h3>

@code {
    private static string imageFilePath = "./sample-data/dog.jpeg";
    private static string modelFilePath = "./model/resnet50-v1-7.onnx";

    protected override async Task OnInitializedAsync()
    {
        var file = await Http.GetByteArrayAsync(imageFilePath);
        using Image<Rgb24>? image = Image.Load<Rgb24>(file);

        Console.WriteLine("image loaded");
        // Resize image
        image.Mutate(x =>
        {
            x.Resize(new ResizeOptions
                {
                    Size = new Size(224, 224),
                    Mode = ResizeMode.Crop
                });
        });

        Tensor<float> input = new DenseTensor<float>(new[] { 1, 3, 224, 224 });
        var mean = new[] { 0.485f, 0.456f, 0.406f };
        var stddev = new[] { 0.229f, 0.224f, 0.225f };
        image.ProcessPixelRows(accessor =>
        {
            for (int y = 0; y < accessor.Height; y++)
            {
                Span<Rgb24> pixelSpan = accessor.GetRowSpan(y);
                for (int x = 0; x < accessor.Width; x++)
                {
                    input[0, 0, y, x] = ((pixelSpan[x].R / 255f) - mean[0]) / stddev[0];
                    input[0, 1, y, x] = ((pixelSpan[x].G / 255f) - mean[1]) / stddev[1];
                    input[0, 2, y, x] = ((pixelSpan[x].B / 255f) - mean[2]) / stddev[2];
                }
            }
        });

        var inputs = new List<NamedOnnxValue>
        {
            NamedOnnxValue.CreateFromTensor("data", input)
        };
        Console.WriteLine("input created");
        //Inject onnxruntime-web to inference with JS in blazor?
        var modelFile = await Http.GetByteArrayAsync(modelFilePath);
        //how to copy onnxruntime to wasm for inference?  
        var session = new InferenceSession(modelFile);
        var results = session.Run(inputs);

        // Postprocess to get softmax vector
        IEnumerable<float> output = results.First().AsEnumerable<float>();
        float sum = output.Sum(x => (float)Math.Exp(x));
        IEnumerable<float> softmax = output.Select(x => (float)Math.Exp(x) / sum);
    }



}
